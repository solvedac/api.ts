"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * @solvedac/unofficial-documentation
 * 이 프로젝트는 [solved.ac](https://solved.ac/) API를 문서화하는 커뮤니티 프로젝트입니다.  이 저장소는 원작자의 요청에 따라 언제든 지워질 수 있으며, 현재 API와 일치하지 않을 수도 있는 점 양해 부탁드립니다.   <sup>   solved.ac 서비스는 shiftpsh가 기획·개발·디자인·운영하는 프로젝트로,   이 저장소와는 solved.ac의 API를 문서화해둔 것 이외에는 아무런 관련이 없습니다. </sup>   [GitHub에서 보기](https://github.com/solvedac/unofficial-documentation)   **주의**: (2023/03/08~) CORS 문제로 인해 API는 사이트 내에서 호출할 수 없으므로 별도 도구를 이용해주십시오. ([#51](https://github.com/solvedac/unofficial-documentation/issues/51)) <br> **참고**: 본 저장소를 내려받고, `pnpm dev`를 실행하시면 로컬 개발 서버를 프록시로 삼아 CORS를 무시할 수 있습니다.    ![@solvedac/unofficial-documentation banner](./assets/solvedac-ud-compact.png)
 *
 * The version of the OpenAPI document: 3.2024.03+b1
 * Contact: me@ranolp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountApi = void 0;
const runtime = __importStar(require("../runtime.cjs"));
/**
 *
 */
class AccountApi extends runtime.BaseAPI {
    /**
     * 리딤 코드와 배지, 배경 등을 교환합니다.  **주의**: 로그인이 필요한 API는 사이트 내에서 호출할 수 없으므로 별도 도구를 이용해주십시오.
     * 코드 교환하기
     */
    async redeemCodeRaw(requestParameters, initOverrides) {
        if (requestParameters['redeemCodeRequest'] == null) {
            throw new runtime.RequiredError('redeemCodeRequest', 'Required parameter "redeemCodeRequest" was null or undefined when calling redeemCode().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (requestParameters['xSolvedacLanguage'] != null) {
            headerParameters['x-solvedac-language'] = String(requestParameters['xSolvedacLanguage']);
        }
        const response = await this.request({
            path: `/account/redeem`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['redeemCodeRequest'],
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * 리딤 코드와 배지, 배경 등을 교환합니다.  **주의**: 로그인이 필요한 API는 사이트 내에서 호출할 수 없으므로 별도 도구를 이용해주십시오.
     * 코드 교환하기
     */
    async redeemCode(requestParameters, initOverrides) {
        await this.redeemCodeRaw(requestParameters, initOverrides);
    }
    /**
     * 계정의 설정을 변경합니다.  **주의**: 로그인이 필요한 API는 사이트 내에서 호출할 수 없으므로 별도 도구를 이용해주십시오.
     * 계정 설정 변경하기
     */
    async updateAccountSettingsRaw(requestParameters, initOverrides) {
        if (requestParameters['updateAccountSettingsRequest'] == null) {
            throw new runtime.RequiredError('updateAccountSettingsRequest', 'Required parameter "updateAccountSettingsRequest" was null or undefined when calling updateAccountSettings().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (requestParameters['xSolvedacLanguage'] != null) {
            headerParameters['x-solvedac-language'] = String(requestParameters['xSolvedacLanguage']);
        }
        const response = await this.request({
            path: `/account/update_settings`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['updateAccountSettingsRequest'],
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * 계정의 설정을 변경합니다.  **주의**: 로그인이 필요한 API는 사이트 내에서 호출할 수 없으므로 별도 도구를 이용해주십시오.
     * 계정 설정 변경하기
     */
    async updateAccountSettings(requestParameters, initOverrides) {
        await this.updateAccountSettingsRaw(requestParameters, initOverrides);
    }
    /**
     * 현재 로그인한 계정 정보를 가져옵니다.  **주의**: 로그인이 필요한 API는 사이트 내에서 호출할 수 없으므로 별도 도구를 이용해주십시오.
     * 로그인 정보 가져오기
     */
    async verifyAccountCredentialsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (requestParameters['xSolvedacLanguage'] != null) {
            headerParameters['x-solvedac-language'] = String(requestParameters['xSolvedacLanguage']);
        }
        const response = await this.request({
            path: `/account/verify_credentials`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * 현재 로그인한 계정 정보를 가져옵니다.  **주의**: 로그인이 필요한 API는 사이트 내에서 호출할 수 없으므로 별도 도구를 이용해주십시오.
     * 로그인 정보 가져오기
     */
    async verifyAccountCredentials(requestParameters = {}, initOverrides) {
        const response = await this.verifyAccountCredentialsRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.AccountApi = AccountApi;
