/* tslint:disable */
/* eslint-disable */
/**
 * @solvedac/unofficial-documentation
 * 이 프로젝트는 [solved.ac](https://solved.ac/) API를 문서화하는 커뮤니티 프로젝트입니다. 이 저장소는 원작자의 요청에 따라 언제든 지워질 수 있으며, 현재 API와 일치하지 않을 수도 있는 점 양해 부탁드립니다.  <sup>   solved.ac 서비스는 shiftpsh가 기획·개발·디자인·운영하는 프로젝트로,   이 저장소와는 solved.ac의 API를 문서화해둔 것 이외에는 아무런 관련이 없습니다. </sup>  **주의**: account 하위 루트를 탐색할 경우, 현재 로그인된 solvedacToken이 노출·오용될 수 있으니 주의하십시오.  [GitHub에서 보기](https://github.com/solvedac/unofficial-documentation)  ![@solvedac/unofficial-documentation banner](./assets/solvedac-ud-compact.png)
 *
 * The version of the OpenAPI document: 3.2021.09+b2
 * Contact: public.ranolp@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime.js';
/**
 *
 */
export class RankingApi extends runtime.BaseAPI {
    /**
     * 레이팅에 따른 조직 순위를 가져옵니다.
     * 조직 순위 가져오기
     */
    async getOrganizationRankingRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/ranking/organization`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * 레이팅에 따른 조직 순위를 가져옵니다.
     * 조직 순위 가져오기
     */
    async getOrganizationRanking(requestParameters, initOverrides) {
        const response = await this.getOrganizationRankingRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * 사용자 CLASS에 따른 순위를 가져옵니다.
     * CLASS 순위 가져오기
     */
    async getRankingByClassRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/ranking/class`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * 사용자 CLASS에 따른 순위를 가져옵니다.
     * CLASS 순위 가져오기
     */
    async getRankingByClass(requestParameters, initOverrides) {
        const response = await this.getRankingByClassRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * 기여 횟수에 따른 순위를 가져옵니다.
     * 기여 순위 가져오기
     */
    async getRankingByContributionRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/ranking/contribution`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * 기여 횟수에 따른 순위를 가져옵니다.
     * 기여 순위 가져오기
     */
    async getRankingByContribution(requestParameters, initOverrides) {
        const response = await this.getRankingByContributionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * 최장 스트릭에 따른 순위를 가져옵니다.
     * 최장 스트릭 순위 가져오기
     */
    async getRankingByStreakRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/ranking/streak`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * 최장 스트릭에 따른 순위를 가져옵니다.
     * 최장 스트릭 순위 가져오기
     */
    async getRankingByStreak(requestParameters, initOverrides) {
        const response = await this.getRankingByStreakRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * 사용자 티어에 따른 순위를 가져옵니다.
     * 티어 순위 가져오기
     */
    async getRankingByTierRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/ranking/tier`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * 사용자 티어에 따른 순위를 가져옵니다.
     * 티어 순위 가져오기
     */
    async getRankingByTier(requestParameters, initOverrides) {
        const response = await this.getRankingByTierRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * 현재 사용자의 역라이벌 티어 순위를 가져옵니다.
     * 역라이벌 순위 가져오기
     */
    async getReverseRivalRankingRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/ranking/reverse_rival`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * 현재 사용자의 역라이벌 티어 순위를 가져옵니다.
     * 역라이벌 순위 가져오기
     */
    async getReverseRivalRanking(requestParameters, initOverrides) {
        const response = await this.getReverseRivalRankingRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * 현재 사용자의 라이벌 티어 순위를 가져옵니다.
     * 라이벌 순위 가져오기
     */
    async getRivalRankingRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/ranking/rival`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * 현재 사용자의 라이벌 티어 순위를 가져옵니다.
     * 라이벌 순위 가져오기
     */
    async getRivalRanking(requestParameters, initOverrides) {
        const response = await this.getRivalRankingRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
